ph                    = 4.5          
nr_residues           = 3            
nr_lambdagroups       = 3            

m_lambda              = 10.0         
T_lambda              = 300          
tau                   = 0.1          
thermostat            = v-rescale    
nst_lambda            = 100          
charge_constraint     = yes          
N_buffers             = 1            
m_buf                 = 10.0         
multistate_constraint = no           
n_multigroups         = 0            

residue               = GLU          
n_coeffs              = 4            
dvdl_coeffs           = 24.685 -577.05 137.39 -172.69       <-- These are always good, even if you have more or less
ref_pka               = 4.25         

residue               = ASP          
n_coeffs              = 4            
dvdl_coeffs           = 37.822 -566.01 117.97 -158.79       <-- These are always good, even if you have more less
ref_pka               = 3.65         

residue               = BUF          
n_coeffs              = 4            
dvdl_coeffs           = 2010.3 -2023.2 249.56 -450.63       <-- these values are multiplied by 3 
ref_pka               = 4.25                                    in this script already because commit does not do it automatically
                                                                but in new commit just put the 1x value and source code will
name                  = GLU                                     multiply them automatically
residue_number        = 17           
initial_lambda        = 0.5          
barrier               = 7.5          
n_atoms               = 5            
index                 = 276 279 280 281 282 

276      -0.210   -0.280
279       0.750    0.620
280      -0.550   -0.760
281      -0.610   -0.760
282       0.440    0.000

name                  = ASP          
residue_number        = 42           
initial_lambda        = 0.5          
barrier               = 7.5          
n_atoms               = 5            
index                 = 688 691 692 693 694 

688      -0.210   -0.280
691       0.750    0.620
692      -0.550   -0.760
693      -0.610   -0.760
694       0.440    0.000

name                  = ASP          
residue_number        = 59           
initial_lambda        = 0.5          
barrier               = 7.5          
n_atoms               = 5            
index                 = 938 941 942 943 944 

938      -0.210   -0.280
941       0.750    0.620
942      -0.550   -0.760
943      -0.610   -0.760
944       0.440    0.000

name                  = BUF          
residue_number        = 1            
initial_lambda        = 0.5          
barrier               = 0.0          
n_atoms               = 9            
index                 = 994 995 996 997 998 999 1000 1001 1002 

994     -0.0656  -0.8476
995      0.5328   0.4238
996      0.5328   0.4328
997     -0.0656  -0.8476
998      0.5328   0.4238
999      0.5328   0.4328
1000    -0.0656  -0.8476
1001     0.5328   0.4238
1002     0.5328   0.4328

--------------------------------------------------------------------------------

CPU Kernel / GPU Kernel

src/gromacs/nbnxm/kernels_reference/kerenl_ref_inner.h
src/gromacs/nbnxm/cuda

-Maar ff kijken of je uit het toevoegen van GPU support constant pH.
-De float4 zit in cuda/nbnxm_cuda_types.h 

--------------------------------------------------------------------------------

float3 -> float4 in:
cu_atomdata

float3 -> typedef die float4 gebruikt in:
nbnxn_cuda_kernel.cuh
nbnxn_cuda_kernel_utils.cuh

Potential uitrekenen voor: zelf + paren + exclusies

Controleren dat een simulatie zonder constant-pH nog correct is.

Ik kan dan later de dV/dl uit de force buffer naar de dV/dl buffer kopieren.

--------------------------------------------------------------------------------

- Alles zit in /nbnxm/cuda

In nbnxm_cuda_types.h voeg je toe:

    typdef float4 ForceBufferElementType;

    en in in struct cu_atomdata verander je *f van een float3 naar een
    ForceBufferElementType.

vervolgens compile je en krijg je overal foutmeldingen, dan moet je overal
die errors vervangen float3 --> ForceBufferElementType

--------------------------------------------------------------------------------

Changed files:

mdlib/sim_util.cpp
    -Add "gmx::ArrayRef<real> electrostaticPotential" to input of definition of function "alternatePmeNbGpuWaitReduce"
        -In this function we call nbv->"atomdata_add_nbat_f_to_f" with the extra parameter "electrostaticPotential"         kopieert naar van nbnxm data naar krachtenarray
                                                                                                                            / outputbuffer
    -The function "atomdata_add_nbat_f_to_f" is called a bunch of different times for different scenarios in this file,
     each time with the extra parameter "electrostaticPotential"

nbnxm/nbnxm.h
    -Add "gmx::ArrayRef<real> electrostaticPotential" to input of declaration of function "atomdata_add_nbat_f_to_f".

nbnxm/nbnxm.cpp
    -Add "gmx::ArrayRef<real> electrostaticPotential" to input of definiton of function "atomdata_add_nbat_f_to_f".
        -In this function we call "reduceForces" with the extra parameter "electrostaticPotential".

nbnxm/atomdata.h
    -Add "gmx::ArrayRef<real> electrostaticPotential" to input of declaration of function "reduceForces".

nbnxm/atomdata.cpp
    -Changed line 667
    -Add "gmx::ArrayRef<real> electrostaticPotential" to input of definition of function "nbnxn_atomdata_add_nbat_f_to_f_part".
    -Add "gmx::ArrayRef<real> electrostaticPotential" to input of definition of funtion "reduceForces".
        -In this function we call "nbnxn_atomdata_add_nbat_f_to_f_part" with the extra parameter "electrostaticPotential".          hier kopie toevoegen en hier print doen

nbnxm/cuda/nbnxm_cuda_types.h
    -Added "typdef float4 ForceBufferElementType".
    -In "struct cu_atomdata", changed "float3 *f" to "ForceBufferElementType *f".

nbnxm/cuda/nbnxm_cuda_kernel.cuh
    -Change the parameter *f we get from adat.f (adat is a c_atomdata struct) from floa3 to ForceBufferElementType.
    -

nbnxm/cuda/nbnxm_cuda_kernel_utils.cuh
    -Changed shuffles in definition of function "reduce_force_j_warp_shfl", depending on what "ForceBufferElementType" is.

nbnxm/cuda/nbnxm_cuda.cu
    -Changed input of "cu_copy_D2H_async" using the nbatom->fstride.
